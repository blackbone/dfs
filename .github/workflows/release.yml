name: Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'
      - run: go test ./...

  build:
    needs: test
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - goos: linux
            arch: amd64
            runner: ubuntu-latest
            cgo: 0
          - goos: linux
            arch: arm64
            runner: ubuntu-latest
            cgo: 0
          # - goos: darwin
          #   arch: amd64
          #   runner: macos-latest
          #   cgo: 1
          # - goos: darwin
          #   arch: arm64
          #   runner: macos-latest
          #   cgo: 1
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'
      - name: Build binaries
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: ${{ matrix.cgo }}
        run: |
          for CMD in dfs dfsctl; do
            go build -o "${CMD}-${GOOS}-${GOARCH}" "./cmd/${CMD}"
            tar -czf "${CMD}-${GOOS}-${GOARCH}.tar.gz" "${CMD}-${GOOS}-${GOARCH}"
          done
      - uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.goos }}-${{ matrix.arch }}"
          path: |
            dfs-${{ matrix.goos }}-${{ matrix.arch }}.tar.gz
            dfsctl-${{ matrix.goos }}-${{ matrix.arch }}.tar.gz

  release:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      INITIAL_TAG: v0.0.1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Get last tag
        id: last
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh api "repos/${GITHUB_REPOSITORY}/tags?per_page=1" --jq '.[0].name' 2>/dev/null || echo "")
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
      - name: Compute next tag
        id: next
        run: |
          LAST="${{ steps.last.outputs.tag }}"
          if [ -z "$LAST" ]; then
            NEXT="$INITIAL_TAG"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<<"${LAST#v}"
            NEXT="v${MAJOR}.${MINOR}.$((PATCH+1))"
          fi
          echo "tag=$NEXT" >> "$GITHUB_OUTPUT"
      - name: Publish release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.next.outputs.tag }}" dist/**/*.tar.gz --generate-notes
